{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-theme-code-notes/src/components/Contents/Contents.tsx","webpack:///./node_modules/gatsby-theme-code-notes/src/templates/Note.js","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NotePage/NotePage.tsx","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["MDXRenderer","require","module","ContentsList","items","map","item","key","url","ContentsItem","href","title","length","Contents","toc","as","sx","my","pageQuery","NotePage","data","pageContext","location","mdx","frontmatter","tags","emoji","link","dateModified","fields","body","fileName","parent","tableOfContents","gitRepoContentPath","useSiteMetadata","showMetadata","Layout","hasUntagged","basePath","path","pathname","mb","fontSize","lineHeight","role","variant","mr","fontFamily","TagList","mt","pt","borderTop","borderTopColor","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","fn","createHTML","this"],"mappings":"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","file":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js-e905357807508dd4a39f.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from 'react'\nimport { Link, Box } from 'theme-ui'\n\nconst ContentsList = ({ items }) => {\n  return (\n    <ul>\n      {items.map((item) => {\n        return <ContentsItem key={`${item.url}-item`} item={item} />\n      })}\n    </ul>\n  )\n}\n\nconst ContentsItem = ({ item }) => (\n  <li>\n    <Link href={item.url}>{item.title}</Link>\n    {item.items && item.items.length && (\n      <ContentsList key={`${item.url}-list`} items={item.items} />\n    )}\n  </li>\n)\n\nexport const Contents = ({ toc }) => {\n  if (!toc.items) {\n    return null\n  }\n\n  return (\n    <Box as=\"details\" sx={{ my: 4 }}>\n      <summary>Table of contents</summary>\n      <ContentsList items={toc.items} key=\"toc-list\" />\n    </Box>\n  )\n}\n","import { graphql } from 'gatsby'\nimport { NotePage } from '../components/NotePage'\n\nexport default NotePage\n\nexport const pageQuery = graphql`\n  query NoteById($id: String!) {\n    mdx(id: { eq: $id }) {\n      body\n      frontmatter {\n        title\n        tags\n        emoji\n        link\n      }\n      fields {\n        dateModified(formatString: \"Do MMM YYYY\")\n      }\n      fields {\n        slug\n      }\n      tableOfContents(maxDepth: 3)\n      parent {\n        ... on File {\n          name\n          fileName: base\n        }\n      }\n    }\n  }\n`\n","import React, { FunctionComponent } from 'react'\nimport { Heading, Box, Flex, Link } from 'theme-ui'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport { TagList } from '../TagList'\nimport { Layout } from '../Layout'\nimport { DateModified } from '../DateModified'\nimport { useSiteMetadata } from '../../use-site-metadata'\nimport { Contents } from '../Contents'\n\ninterface NotePageProps {\n  data: {\n    mdx: {\n      frontmatter: {\n        tags: string[]\n        title: string\n        emoji: string\n        link: string\n      }\n      body: any\n      fields: {\n        dateModified: string\n      }\n      parent: {\n        name: string\n        fileName: string\n      }\n      tableOfContents: any\n    }\n  }\n  pageContext: {\n    id: string\n    previous: boolean\n    next: boolean\n    hasUntagged: boolean\n    basePath?: string\n  }\n  location: {\n    pathname: string\n  }\n}\n\nexport const NotePage: FunctionComponent<NotePageProps> = ({\n  data,\n  pageContext,\n  location,\n}) => {\n  if (!data) {\n    return null\n  }\n  const {\n    frontmatter: { title, tags, emoji, link },\n    fields: { dateModified },\n    body,\n    parent: { fileName },\n    tableOfContents,\n  } = data.mdx\n\n  const { gitRepoContentPath } = useSiteMetadata()\n  const showMetadata = !!(link || dateModified)\n\n  return (\n    <Layout\n      hasUntagged={pageContext.hasUntagged}\n      basePath={pageContext.basePath}\n      path={location.pathname}\n      title={title}\n    >\n      <article>\n        <Box as=\"header\" mb={4}>\n          {emoji && (\n            <Box\n              sx={{\n                fontSize: 7,\n                lineHeight: 1,\n                mb: 3,\n              }}\n            >\n              <span role=\"img\">{emoji}</span>\n            </Box>\n          )}\n\n          <Heading as=\"h1\" variant=\"noteTitle\">\n            {title}\n          </Heading>\n\n          {showMetadata && (\n            <Flex sx={{ mb: 3 }}>\n              {link && (\n                <Link\n                  href={link}\n                  sx={{ mr: 3, fontFamily: 'monospace', fontSize: 0 }}\n                >\n                  {link}\n                </Link>\n              )}\n              {false && <DateModified>{dateModified}</DateModified>}\n            </Flex>\n          )}\n\n          {tags && (\n            <Flex>\n              <TagList tags={tags} />\n            </Flex>\n          )}\n        </Box>\n\n        <Contents toc={tableOfContents} />\n\n        <MDXRenderer>{body}</MDXRenderer>\n\n        <Box\n          sx={{\n            mt: 6,\n            pt: 4,\n            borderTop: '2px solid',\n            borderTopColor: 'background',\n          }}\n        >\n          {gitRepoContentPath && (\n            <Link href={`${gitRepoContentPath}${fileName}`}>\n              Edit this page\n            </Link>\n          )}\n        </Box>\n      </article>\n    </Layout>\n  )\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}